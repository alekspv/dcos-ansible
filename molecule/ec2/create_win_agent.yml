---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ not (lookup('env', 'MOLECULE_DEBUG') | bool or molecule_yml.provisioner.log|default(false) | bool) }}"
  vars:
    ssh_user: ec2-user
    ssh_port: 22
    user_data: |
               <script>
                 winrm quickconfig -q & winrm set winrm/config @{MaxTimeoutms="1800000"} & winrm set winrm/config/service @{AllowUnencrypted="true"} & winrm set winrm/config/service/auth @{Basic="true"}
               </script>
               <powershell>
                 New-SelfSignedCertificate -DnsName $(Invoke-RestMethod -uri http://169.254.169.254/latest/meta-data/local-hostname) -CertStoreLocation Cert:\LocalMachine\My 
                 New-Item WSMan:\localhost\Listener -Address * -Transport HTTPS -HostName $(Invoke-RestMethod -uri http://169.254.169.254/latest/meta-data/local-hostname) -CertificateThumbPrint $(ls Cert:\LocalMachine\My).Thumbprint -Force
                 Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
                 Set-MpPreference -DisableRealtimeMonitoring $true
               </powershell>

    security_group_name: molecule
    security_group_description: Security group for testing Molecule
    security_group_rules:
      - proto: tcp
        from_port: "{{ ssh_port }}"
        to_port: "{{ ssh_port }}"
        cidr_ip: '0.0.0.0/0'
      - proto: icmp
        from_port: 8
        to_port: -1
        cidr_ip: '0.0.0.0/0'
      - proto: tcp
        from_port: 0
        to_port: 65535
        cidr_ip: '172.31.0.0/16'
    security_group_rules_egress:
      - proto: -1
        from_port: 0
        to_port: 0
        cidr_ip: '0.0.0.0/0'

    keypair_name: molecule_key
    keypair_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/ssh_key"
  tasks:
    - debug:
        var: molecule_yml.platforms
    - name: Create security group
      ec2_group:
        name: "{{ security_group_name }}"
        description: "{{ security_group_name }}"
        rules: "{{ security_group_rules }}"
        rules_egress: "{{ security_group_rules_egress }}"
        region: "{{ item.region }}"
      with_items: "{{ molecule_yml.platforms }}"

    - name: Test for presence of local keypair
      stat:
        path: "{{ keypair_path }}"
      register: keypair_local

    - name: Delete remote keypair
      ec2_key:
        name: "{{ keypair_name }}"
        state: absent
        region: "{{ item.region }}"
      with_items: "{{ molecule_yml.platforms }}"
      when: not keypair_local.stat.exists

    - name: Create keypairs
      ec2_key:
        name: "{{ keypair_name }}"
        region: "{{ item.region }}"
      with_items: "{{ molecule_yml.platforms }}"
      register: keypairs

    - name: Persist the keypairs
      blockinfile:
        path: "{{ keypair_path }}"
        create: yes
        state: present
        block: "{{ item.key.private_key }}"
        mode: 0600
      when: item.changed
      with_items: "{{ keypairs.results }}"

    - name: Create molecule linux instance(s)
      ec2:
        key_name: "{{ keypair_name }}"
        image: "{{ item.image }}"
        region: "{{ item.region }}"
        instance_type: "{{ item.instance_type }}"
        group: "{{ security_group_name }}"
        user_data: "{{ item.user_data | default(user_data) }}"
        volumes:
          - device_name: /dev/sda1
            volume_size: "{{ item.volume_size | default(20) }}"
            volume_type: gp2
            delete_on_termination: yes
        instance_tags:
          Name: "molecule {{ item.name }} {{ lookup('env', 'USER') }}@{{ lookup('env', 'HOSTNAME') }}"
          instance: "{{ item.name }}"
          molecule_region: "{{ item.region }}"
          molecule_ssh_user: "{{ item.ssh_user | default(ssh_user) }}"
          os_type: "{{ item.os_type }}"
        wait: yes
        exact_count: 1
        count_tag:
          instance: "{{ item.name }}"
      register: server
      when: item.os_type  == "centos"
      with_items: "{{ molecule_yml.platforms }}"
      async: 7200
      poll: 0

    - name: Create molecule windows instance(s)
      ec2:
        key_name: "{{ keypair_name }}"
        image: "{{ item.image }}"
        region: "{{ item.region }}"
        instance_type: "{{ item.instance_type }}"
        group: "{{ security_group_name }}"
        user_data: "{{ item.user_data | default(user_data) }}"
        volumes:
          - device_name: /dev/sda1
            volume_size: "{{ item.volume_size | default(20) }}"
            volume_type: gp2
            delete_on_termination: yes
        instance_tags:
          Name: "molecule {{ item.name }} {{ lookup('env', 'USER') }}@{{ lookup('env', 'HOSTNAME') }}"
          instance: "{{ item.name }}"
          molecule_region: "{{ item.region }}"
          molecule_ssh_user: "{{ item.ssh_user | default(ssh_user) }}"
          os_type: "{{ item.os_type }}"
        wait: yes
        exact_count: 1
        count_tag:
          instance: "{{ item.name }}"
      register: server_windows
      when: item.os_type  == "windows"
      with_items: "{{ molecule_yml.platforms }}"
      async: 7200
      poll: 0

    - name: Wait for centos instance(s) creation to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: ec2_jobs
      until: ec2_jobs.finished
      retries: 300
      when: item.changed
      with_items: "{{ server.results }}"

    - name: Wait for windows instance(s) creation to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: ec2_jobs_windows
      until: ec2_jobs_windows.finished
      retries: 300
      when: item.changed
      with_items: "{{ server_windows.results }}"

    # Mandatory configuration for Molecule to function.



    - debug:
        var: server

    - name: Populate instance config dict
      set_fact:
        instance_conf_dict: {
          'instance': "{{ item.instances[0].tags.instance }}",
          'region': "{{ item.instances[0].tags.molecule_region }}",
          'address': "{{ item.instances[0].public_ip }}",
          'user': "{{ item.instances[0].tags.molecule_ssh_user }}",
          'port': "{{ item.instances[0].tags.molecule_ssh_port | default(ssh_port) }}",
          'identity_file': "{{ keypair_path }}",
          'instance_ids': "{{ item.instance_ids }}",
          'os': "{{ item.instances[0].tags.os_type }}",
          'ansible_user': 'Administrator',
          'ansible_connection': 'winrm',
          'ansible_winrm_server_cert_validation': 'ignore' }
      with_items: "{{ ec2_jobs.results | default(server.results) }}"
      register: instance_config_dict
      when: server.changed | bool and item.changed

    - debug:
        var: instance_config_dict

    - name: Convert instance config dict to a list
      set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"
      when: server.changed

    - name: Dump instance config
      copy:
        content: "{{ instance_conf | to_json | from_json | molecule_to_yaml | molecule_header }}"
        dest: "{{ molecule_instance_config }}"
      when: server.changed

    - name: Wait for SSH
      wait_for:
        port: "{{ item.port }}"
        host: "{{ item.address }}"
        search_regex: SSH
        delay: 60
        timeout: 320
      when: item.os == "centos"
      with_items: "{{ lookup('file', molecule_instance_config) | molecule_from_yaml }}"

    - name: Wait for boot process to finish
      pause:
        seconds: 2
