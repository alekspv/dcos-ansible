- name: Windows | Install vcredist140
  win_chocolatey:
    name: vcredist140
    state: present
  notify: reboot the host

- name: Windows | Install nssm
  win_chocolatey:
    name: nssm
    state: present

- name: Windows | configure the DNS client with Masters
  win_dns_client:
    adapter_names: '*'
    ipv4_addresses: "{{ groups['masters'] }}"

- name: Windows | Create folders and subfolder for DCOS binaries
  win_file:
    path: C:\dcos\{{ item }}
    state: directory
  with_items:
    - work
    - images
    - mesos-logs

- name: Windows | Download mesos-binaries
  win_get_url:
    url: "{{ url_to_mesosbin }}"
    dest: C:\dcos\mesos-binaries.{{ dcos['version'] }}.zip
    force: no

- name: Windows | Unzip the mesos-binaries
  win_unzip:
    src: C:\dcos\mesos-binaries.{{ dcos['version'] }}.zip
    dest: C:\dcos\mesos-binaries
    creates: C:\dcos\mesos-binaries

- name: Windows | Install Mesos Agent service
  win_nssm:
    name: "{{ mesos_workers.windows.service_name }}"
    application: "{{ mesos_workers.windows.executor }}"
    app_parameters_free_form: --master="zk://{{ zookeeper }}/mesos" --launcher_dir="{{ mesos_workers.windows.bindir }}" --log_dir="{{ mesos_workers.windows.logdir }}" --appc_store_dir="{{ mesos_workers.windows.imagesdir }}" --work_dir="{{ mesos_workers.windows.workdir }}" --runtime_dir="{{ mesos_workers.windows.workdir }}" --isolation="windows/cpu,windows/mem,filesystem/windows" --containerizers="mesos,docker" --attributes="{{ mesos_workers.windows.attributes }}" --ip={{ inventory_hostname }} --hostname={{ inventory_hostname }} --resources="ports:[{{ resources_ports }}]" --executor_registration_timeout=10mins --fetcher_stall_timeout=10mins

- name: Windows | Set Mesos Agent dependency on Docker service
  win_service:
    name: "{{ mesos_workers.windows.service_name }}"
    dependencies: [ 'docker' ]
    start_mode: auto
  notify: restart the service
