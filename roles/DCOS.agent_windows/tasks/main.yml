- name: Windows | Install vcredist140
  win_chocolatey:
    name: vcredist140
    state: present
  notify: reboot the host

- name: Windows | Install nssm
  win_chocolatey:
    name: nssm
    state: present

- name: Windows | configure the DNS client on Windows-node
  win_dns_client:
    adapter_names: '*'
    ipv4_addresses: "{{ groups['masters'] }}"

- name: Windows | Create folders and subfolder for DCOS binaries
  win_file:
    path: C:\dcos\{{ item }}
    state: directory
  with_items:
    - work
    - images
    - mesos-logs

- name: Windows | Download mesos-binaries
  win_get_url:
    url: "{{ url_to_mesosbin }}"
    dest: C:\dcos\mesos-binaries.{{ dcos['version'] }}.zip
    force: no

- name: Windows | Unzip the mesos-binaries
  win_unzip:
    src: C:\dcos\mesos-binaries.{{ dcos['version'] }}.zip
    dest: C:\dcos\mesos-binaries
    creates: C:\dcos\mesos-binaries

- name: Windows | Install Mesos agent service
  win_nssm:
    name: "{{ mesos_workers.windows.service_name }}"
    application: "{{ mesos_workers.windows.bindir }}\\mesos-agent.exe"
    app_parameters_free_form: --master="zk://{{ zookeeper }}/mesos" --launcher_dir="{{ mesos_workers.windows.bindir }}" --log_dir="{{ mesos_workers.windows.logdir }}" --appc_store_dir="{{ mesos_workers.windows.imagesdir }}" --work_dir="{{ mesos_workers.windows.workdir }}" --runtime_dir="{{ mesos_workers.windows.workdir }}" --isolation="windows/cpu,windows/mem,filesystem/windows" --containerizers="mesos,docker" --attributes="{{ mesos_workers.windows.attributes }}" --ip={{ inventory_hostname }} --hostname={{ inventory_hostname }} --resources='ports:[{{ resources_ports }}]'
  notify: set dependency and reboot the service

#- name: Windows | Set recovery property for service
#  win_shell: |
#    sc failure "{{ mesos_workers.windows.#service_name }}" reset=120 actions= restart/1000/restart/5000/restart/10000//
#  args:
#    executable: cmd
#  notify: reboot the service

#- name: Windows | Register job for mesos-agent
#  win_scheduled_task:
#    name: mesos-agent
#    description: mesos-agent
#    logon_type: password
#    multiple_instances: 2
#    actions:
#    - path: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
#      arguments:  -ExecutionPolicy Unrestricted -NonInteractive -File C:\dcos\start.ps1
#    triggers:
#    - type: boot
#    - type: registration
#      repetition:
#        interval: "{{ mesos_agent_restart_interval }}"
#        duration: "{{ mesos_agent_restart_duration }}"
#    restart_count: "{{ mesos_agent_restart_count }}"
#    restart_interval: "{{ mesos_agent_restart_interval }}"
#    username: "{{ system_user }}"
#    password: "{{ ansible_password }}"
#    run_level: highest
#    state: present
#  when:
#    task_stat.task_exists == False
#  notify:
#    - reboot the host
